{"ast":null,"code":"var _jsxFileName = \"/opt/lampp/htdocs/financial-portfolio-tracker-app/src/components/MyStock/AlphaCall.js\";\nimport React, { Component } from 'react';\nimport Axios from 'axios';\n\nclass AlphaCall extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      newcurrentprice: null,\n      profit: null\n    };\n  }\n\n  componentDidMount() {\n    const api_key = '0XCP84NVEHMH0GIX';\n    var symbol = this.props.symbol;\n    var date = this.props.date;\n    var buyprice = this.props.buyprice;\n    var numberOfShares = this.props.numberOfShares;\n    Axios.get('https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=' + symbol + '&outputsize=full&apikey=' + api_key + '').then(response => {\n      //   console.log(response);\n      let currentprice = response.data['Time Series (Daily)'][date]['4. close'];\n      let profit = (currentprice - buyprice) * numberOfShares; // profit and loss logic!\n\n      profit = +profit.toFixed(2);\n      this.setState({\n        newcurrentprice: currentprice,\n        profit\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }\n    }, this.state.newcurrentprice), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }\n    }, this.state.profit));\n  }\n\n}\n\nexport default AlphaCall;","map":{"version":3,"sources":["/opt/lampp/htdocs/financial-portfolio-tracker-app/src/components/MyStock/AlphaCall.js"],"names":["React","Component","Axios","AlphaCall","state","newcurrentprice","profit","componentDidMount","api_key","symbol","props","date","buyprice","numberOfShares","get","then","response","currentprice","data","toFixed","setState","catch","error","console","log","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,SAAN,SAAwBF,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAE/BG,KAF+B,GAEvB;AACLC,MAAAA,eAAe,EAAE,IADZ;AAELC,MAAAA,MAAM,EAAE;AAFH,KAFuB;AAAA;;AAO/BC,EAAAA,iBAAiB,GAAG;AACnB,UAAMC,OAAO,GAAG,kBAAhB;AAEA,QAAIC,MAAM,GAAI,KAAKC,KAAL,CAAWD,MAAzB;AACA,QAAIE,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAtB;AACA,QAAIC,QAAQ,GAAG,KAAKF,KAAL,CAAWE,QAA1B;AACA,QAAIC,cAAc,GAAG,KAAKH,KAAL,CAAWG,cAAhC;AAEAX,IAAAA,KAAK,CAACY,GAAN,CAAU,yEAAuEL,MAAvE,GAA8E,0BAA9E,GAAyGD,OAAzG,GAAiH,EAA3H,EACCO,IADD,CACMC,QAAQ,IAAI;AAChB;AACE,UAAIC,YAAY,GAAGD,QAAQ,CAACE,IAAT,CAAc,qBAAd,EAAqCP,IAArC,EAA2C,UAA3C,CAAnB;AACA,UAAIL,MAAM,GAAI,CAACW,YAAY,GAAGL,QAAhB,IAA0BC,cAAxC,CAHc,CAG2C;;AACzDP,MAAAA,MAAM,GAAG,CAACA,MAAM,CAACa,OAAP,CAAe,CAAf,CAAV;AACA,WAAKC,QAAL,CAAc;AACVf,QAAAA,eAAe,EAAEY,YADP;AAEVX,QAAAA;AAFU,OAAd;AAIH,KAVD,EAWCe,KAXD,CAWOC,KAAK,IAAI;AAACC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAAmB,KAXpC;AAaF;;AAECG,EAAAA,MAAM,GAAG;AACN,wBACG,uDACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKrB,KAAL,CAAWC,eAAhB,CADH,eAEG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKD,KAAL,CAAWE,MAAhB,CAFH,CADH;AAMF;;AArC8B;;AAwClC,eAAeH,SAAf","sourcesContent":["import React, { Component } from 'react';\nimport Axios from 'axios';\n\nclass AlphaCall extends Component {\n\n   state = {\n      newcurrentprice: null,\n      profit: null\n   }\n\n   componentDidMount() {\n    const api_key = '0XCP84NVEHMH0GIX';\n\n    var symbol =  this.props.symbol;\n    var date = this.props.date;\n    var buyprice = this.props.buyprice;\n    var numberOfShares = this.props.numberOfShares;\n\n    Axios.get('https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol='+symbol+'&outputsize=full&apikey='+api_key+'')\n    .then(response => {\n      //   console.log(response);\n        let currentprice = response.data['Time Series (Daily)'][date]['4. close'];\n        let profit = ((currentprice - buyprice)*numberOfShares); // profit and loss logic!\n        profit = +profit.toFixed(2);\n        this.setState({\n            newcurrentprice: currentprice,\n            profit\n        })\n    })\n    .catch(error => {console.log(error)});\n\n }\n\n   render() {\n      return (\n         <>\n            <td>{this.state.newcurrentprice}</td>\n            <td>{this.state.profit}</td>\n         </>\n      )\n   }\n}\n\nexport default AlphaCall\n\n"]},"metadata":{},"sourceType":"module"}