{"version":3,"sources":["components/Navbar/Navbar.js","components/MyStock/MyStock.js","components/HorizontalLine/HorizontalLine.js","components/AddStocks/AddStockButtons/AddStockButton/AddStockButton.js","components/AddStocks/AddStockButtons/AddStockButtons.js","components/AddStocks/AddStocks.js","common/Backdrop/Backdrop.js","common/Modal/Modal.js","pages/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","title","MyStock","state","myStocks","gitapi","rows","Object","keys","map","row","datarow","symbol","Axios","get","then","response","console","log","currentprice","data","profit","buyprice","numberOfShares","setState","newcurrentprice","catch","error","this","stockData","key","name","closingPrice","id","Component","HorizontalLine","AddStockButton","onClick","clicked","stock","AddStockButtons","allStocksData","button","allStocks","addStock","AddStocks","newAllStocksHandler","newStocks","setstate","length","Backdrop","style","Modal","height","textAlign","position","backgroundColor","zIndex","left","top","boxSizing","width","overflowY","close","modalCloseHandler","content","Main","showModal","selectedStock","dateError","dateErrorMsg","formComplete","formIncompleteError","addStockHandler","showModel","addStockToDBHandler","BuyingPrice","current","value","BuyingDate","NoOfShares","date","post","newAllStocks","push","newMystocks","put","dateHandler","event","Date","target","getDay","getTime","React","createRef","today","modalContent","color","type","min","placeholder","ref","onChange","disabled","weekendwarning","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.6ab593a0.chunk.js","sourcesContent":["import React from 'react';\nimport './Navbar.css';\n\n\nconst Navbar = (props) => {\n        return (\n            <div className=\"Navbar\">\n                <span className=\"NavbarTitle\">{props.title}</span>\n            </div>\n        )\n    \n}\n\nexport default Navbar;\n\n","import React , {Component}from 'react';\nimport './MyStock.css';\nimport Axios from 'axios';\n\n\nclass MyStock extends Component{\n    state = {\n        myStocks: {}\n    }\n\n    gitapi = () => {\n        const api_key = '0XCP84NVEHMH0GIX';\n        let rows = {}; \n        Object.keys(this.props.myStocks).map(row => {\n            let datarow = this.props.myStocks[row];\n            rows[datarow.symbol] = {...datarow};\n        Axios.get(`https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${datarow.symbol}&outputsize=full&apikey=${api_key}.json`)\n        .then(response => {\n            console.log(response);\n            let currentprice = response.data['Time Series (Daily)'];\n            console.log(currentprice);\n            let profit = ((currentprice - datarow.buyprice)*datarow.numberOfShares); // profit and loss logic!\n            console.log(profit);\n            this.setState({\n                newcurrentprice: currentprice,\n                profit\n            })\n        })\n        .catch(error => {console.log(error)});\n\n        return(\n            <div>\n                 <MyStock newcurrentprice = {this.state.newcurrentprice} profit={this.state.profit}/> \n            </div>        \n            )\n            \n      })\n      console.log(rows);\n     }\n\n\n   \n\n     render(){\n        let rows = \n        Object.keys(this.props.myStocks).map(row => {\n            let stockData = this.props.myStocks[row];\n                        return (\n                            <tr  key={stockData.symbol}>\n                            <td>{stockData.symbol}</td>\n                            <td>{stockData.name}</td>\n                            <td>{stockData.numberOfShares}</td>\n                            <td>{stockData.closingPrice}</td>\n                            <td>{stockData.newcurrentprice}</td>\n                            <td>{stockData.profit}</td>\n                            <td><button className=\"StopTrackingbtn\">Stop Tracking</button></td>\n                        </tr>\n                        )})\n                        // console.log(rows);\n        return (\n            <div className=\"MyStock\">\n                <div className=\"Header\">\n                    <span className=\"MyStockTitle\">My Stocks</span>\n                </div>\n                <div className=\"body\">\n                    <table id=\"MyStocksTable\" className=\"MyStocksTable\">\n                        <thead>\n                            <tr>\n                                <th>Stock symbol</th>\n                                <th>Stock name</th>\n                                <th>No.of shares</th>\n                                <th>Buy price</th>\n                                <th>Current price</th>\n                                <th>Profit/Loss</th>\n                                <th>Stop Tracking</th>\n                            </tr>\n                        </thead>\n\n                        <tbody>\n                            {rows}\n                        </tbody>\n                    </table>\n                </div>\n                \n            </div>\n        )\n    \n}\n}\nexport default MyStock;\n\n","import React from 'react';\nimport './HorizontalLine.css';\n\n\nconst HorizontalLine = (props) => {\n        return (\n            <div className=\"HorizontalLine\">\n               <hr className=\"hrline\"></hr>\n            </div>\n        )\n    \n}\n\nexport default HorizontalLine;\n\n","import React from 'react';\nimport './AddStockButton.css';\n\n\nconst AddStockButton = (props) => {\n    // console.log(props);\n        return (\n            <div className=\"AddStockButton\">\n               <button className=\"StockButton\" onClick = {() => props.clicked(props.stock)}>{props.stock.symbol}</button>\n                <span className=\"stockname\">{props.stock.name}</span>\n            </div>\n        )\n    \n}\n\nexport default AddStockButton;\n\n","import React, { Component } from 'react';\nimport './AddStockButtons.css';\n\nimport AddStockButton from './AddStockButton/AddStockButton'\n\nclass AddStockButtons extends Component {\n    state = {\n        allStocksData: {}\n    }\n\n\n    render() {\n        let button = this.props.allStocks.map(stock => {\n            return stock ? <AddStockButton \n            key={stock.symbol}\n            stock={stock}\n            clicked={(stock) => this.props.addStock(stock)} /> : null\n        })\n    \n        return (\n            <div className=\"AddStockButtons\">\n                {button}\n            </div>\n        )\n    }\n}\n\nexport default AddStockButtons;\n\n","import React, { Component } from 'react';\nimport './AddStocks.css';\n\nimport AddStockButtons from './AddStockButtons/AddStockButtons'\n\n\nclass AddStocks extends Component{\n    newAllStocksHandler = (newStocks) => {\n        this.setstate({\n            allStocks: newStocks\n        })\n    }\n\n\n    render(){\n        return (\n            <div className=\"AddStocks\">\n                <div className=\"AddStocksTitle\">Add Stocks to My Stocks</div>\n                {\n                    this.props.error && \n                    <p>{this.props.error}</p>\n                }\n                {\n                    this.props.allStocks && this.props.allStocks.length > 0 && \n                    <AddStockButtons \n                    addStock = {(stock) => this.props.addStock(stock)}\n                    allStocks = {this.props.allStocks}\n                    // newAllStocks = {(newAllStocks) => { console.log(newAllStocks); this.newAllStocksHandler(newAllStocks)}}\n                    // newMyStocks = {this.props.newMyStocks} \n                    />\n                }\n                \n            </div>\n        )\n    }\n    \n}\n\nexport default AddStocks;\n\n","import React from 'react';\n\nconst Backdrop = () => {\n    return (\n        <div style={{'width':'100%', 'height': '100%', 'backgroundColor': 'rgba(0,0,0,0.5)', 'zIndex': 100, 'position':'fixed','left': 0,'top': 0}}></div>\n    )\n}\n\nexport default Backdrop;","import React, { Component } from 'react';\nimport './Modal.css';\n\nimport Backdrop from './../Backdrop/Backdrop';\n\nclass Modal extends Component {\n    render() {\n        return (\n            <div>\n                <Backdrop />\n                <div style={{height:'350px', textAlign:'center', position:'fixed', backgroundColor:'#fff', zIndex: 500, left: '15%', top: '10%', boxSizing: 'border-box', width: '70%', overflowY: 'scroll'}}>\n                <button className=\"closebutton\" onClick = {() => this.props.close(this.props.modalCloseHandler)}>X</button>\n                    <h3>{this.props.title}</h3>\n                    {this.props.content}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Modal;","import React, { Component } from 'react';\nimport './Main.css';\nimport Axios from 'axios';\nimport Navbar from '../../components/Navbar/Navbar';\nimport MyStock from '../../components/MyStock/MyStock';\nimport HorizontalLine from '../../components/HorizontalLine/HorizontalLine';\nimport AddStocks from '../../components/AddStocks/AddStocks';\nimport Modal from './../../common/Modal/Modal';\n\n\nclass Main extends Component {\n    constructor(props){\n        super(props);\n        this.NoOfShares = React.createRef();\n        this.BuyingPrice = React.createRef();\n        this.BuyingDate = React.createRef();\n    }\n    state = {\n        myStocks: {},\n        allStocks: {},\n        showModal : false,\n        selectedStock : {},\n        dateError : false,\n        dateErrorMsg : null,\n        formComplete : false,\n        formIncompleteError : false\n    }\n\n    componentDidMount() {\n        Axios.get('https://financial-portfolio-trac-178fd.firebaseio.com/allStocks.json')\n            .then(response => {\n                console.log(response);\n                let allStocks = response.data;\n                    Axios.get('https://financial-portfolio-trac-178fd.firebaseio.com/myStocks.json')\n                    .then(response => {\n                        console.log(response);\n                    this.setState({\n                        myStocks: response.data,\n                        allStocks: allStocks\n                    })\n                })\n            \n            })\n            .catch(error => {console.log(error)});\n    }\n\n    addStockHandler = (stock) => {\n        let selectedStock = {};\n    \n        selectedStock.symbol = stock.symbol;\n        selectedStock.name = stock.name;\n\n        this.setState({\n            showModel : true,\n            selectedStock : selectedStock\n        })\n    }\n\n    modalCloseHandler = () => {this.setState({showModel : false})};\n   \n    addStockToDBHandler = () => {\n        if(this.BuyingPrice.current.value.length === 0 || this.BuyingDate.current.value.length === 0 || this.NoOfShares.current.value.length === 0){\n            this.setState({\n                formComplete : false,\n                formIncompleteError : true\n            })\n        }else{\n            let selectedStock = {...this.state.selectedStock}\n            // console.log(selectedStock);\n            selectedStock.closingPrice = this.BuyingPrice.current.value;\n            selectedStock.numberOfShares = this.NoOfShares.current.value;\n            selectedStock.date = this.BuyingDate.current.value;\n            \n            Axios.post('https://financial-portfolio-trac-178fd.firebaseio.com/myStocks.json', selectedStock)\n                .then(response => {\n                    // console.log(response);\n                    let allStocks = {...this.state.allStocks};\n                    // console.log(allStocks);\n                    let newAllStocks = [];\n                    // console.log(newAllStocks);\n                    for(let value in allStocks){\n                        if(allStocks[value].symbol !== this.state.selectedStock.symbol){\n                            newAllStocks.push(allStocks[value]);\n                        }\n                    }\n\n                    let newMystocks = {};\n\n                    Axios.get('https://financial-portfolio-trac-178fd.firebaseio.com/myStocks.json')\n                        .then(response => {\n                            newMystocks = response.data;\n                       Axios.put('https://financial-portfolio-trac-178fd.firebaseio.com/allStocks.json', newAllStocks)\n                            .then(response => {\n                                this.setState({\n                                    selectedStock : {},\n                                    showModel : false,\n                                    allStocks: newAllStocks,\n                                    myStocks : newMystocks\n                                })\n                        }).catch(error => {console.log(error)});\n                    }).catch(error => {console.log(error)});\n                }).catch(error => {console.log(error)});\n            }\n        }\n\n\n    dateHandler = (event) => {\n        if(new Date(event.target.value).getDay() === 0 || new Date(event.target.value).getDay() === 6){\n            this.setState({\n                dateError : true,\n                dateErrorMsg : 'you cannot select a weekend date'\n            })\n        }else if(new Date(event.target.value).getTime() > new Date().getTime()){\n            this.setState({\n                dateError : true,\n                dateErrorMsg : 'you cannot select a future date'\n            })\n\n        }else{\n            this.setState({\n                dateError : false,\n                dateErrorMsg : null\n            })\n        }\n    }\n    \n    render() {\n        let today = new Date();\n        let modalContent = this.state.showModel ? \n\n        (\n            <>\n            {this.state.formIncompleteError ? <p style={{color : 'red'}}>Kindly complete the form before adding this stock for tracking</p> : null}\n            <div className=\"AddStockForm\">\n             <div className=\"FormInput\"><span className=\"Lable\">Company Name:</span><span className=\"cname\">{this.state.selectedStock.name}</span></div>\n             <div className=\"FormInput\"><span className=\"Lable\">No. of Shares:</span><input id=\"noShares\" type=\"number\" min=\"1\" placeholder=\"No of Shares\" ref={this.NoOfShares}/></div>\n             <div className=\"FormInput\"><span className=\"Lable\">Buy Price:</span><input id=\"buyPrice\" type=\"number\" min=\"1\" placeholder=\"buying Price\" ref={this.BuyingPrice}/></div>\n             <div className=\"FormInput\"><span className=\"Lable\">Buy Date:</span><input id=\"buyDate\" type=\"date\" onChange={this.dateHandler} ref={this.BuyingDate}/></div>\n             {this.state.dateError ? <span style={{color : 'red'}}>{this.state.dateErrorMsg}</span> : null}\n            </div>\n            <button className=\"AddButton\" disabled={this.state.formComplete} onClick={this.addStockToDBHandler}>Add</button>\n            </>\n        )\n        :null;\n\n        let weekendwarning = (\n            today.getDay() === 0 || today.getDay() === 6 ?\n            <p>*Since today is a weekend, the currernt price refers to the last updated working day price.</p> :\n            null\n        )\n\n        return (\n            <div>\n                {\n                    this.state.showModel ?\n                    <Modal  \n                        title={`Add ${this.state.selectedStock.name} to My Stocks`}\n                        content = {modalContent}\n                        close = {this.modalCloseHandler}/> :\n                        null\n                }\n               <Navbar title=\"Finance Portfolio Tracker\" />\n               {weekendwarning}\n               <MyStock myStocks = {this.state.myStocks}/>\n               <HorizontalLine />\n               {\n                Object.keys(this.state.myStocks).length < 5 ?\n               <AddStocks allStocks = {this.state.allStocks} addStock={this.addStockHandler}/> :\n               <AddStocks error={'You can add only 5 stocks for tracking!'} />\n                }\n            </div>\n        )\n    }\n}\n\n\n\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Main from './pages/Main/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Main />\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}